Interface - Coach
Classes - BaseballCoach, TrackCoach (implements Coach)

Spring Bean - When Java objects are created by the Spring Container,
			  then Spring refers to them as "Spring Beans".

Spring Container is generally known as ApplicationContext			  
Spring Container functions:
	Creates and manages objects (Inversion of Control)
	Inject oject's dependencies (Dependency Injection)
	
Configuring Spring Container
	XML configuration file
	Java annotations
	Java source code

Spring Inversion of Control (IoC)
	Spring provides an Object Factory which on the base of configuration file,
	it provides the appropriate implementation. The app will be configurable.
	
Spring IoC Development Process
	1. Configure your Spring Beans
	2. Create a Spring Container
	3. Retrieve Beans from Spring Container 
	
Dependency Injection
	Dependency Injection Principle - The client delegates to call another object
									 the responsibility of providing its dependencies
	Two most common types - Constructor Injection, Setter Injection

Constructor Injection Development Process
	1. Define the dependency interface and class
	2. Create a constructor in your class for injections
	3. Configure the dependency injection in Spring configuration file
    
Setter Injection Development Process
	1. Create setter method(s) in your class for injections
	2. Configure the dependency injection in configuration files
	
Injecting values from Properties file
	1. Create a Property file
	2. Load the Property file in Spring configuration file
	3. Reference values from the Property file 

How Spring process the configuration file
	<bean id="myFortune" class="com.ps.springdemo.HappyFortuneService"></bean>
	=>	HappyFortuneService myFortune = new HappyFortuneService();
	
	// Constructor Injection
    <bean id="myCoach" class="com.ps.springdemo.TrackCoach">
    	<constructor-arg ref="myFortune"/> </bean>
    =>	TrackCoach myCoach = new TrackCoach(myFortune);
    
    // Setter Injection
    <bean id="myCricketCoach" class="com.ps.springdemo.CricketCoach">
    	<property name="fortuneService" ref="myFortune"/> </bean>
    =>	CricketCoach myCricketCoach = new CricketCoach();
    	myCricketCoach.setFortuneService(myFortune);
    	[spring creates at setter function named set{name}() with first letter of name capitalized]
    	
    // Injecting literals values (from Property file)
    <context:property-placeholder location="classpath:sport.properties" />
    <property name="emailAddress" value="${foo.email}" />
    <property name="team" value="${foo.team}" />